@use "sass:map";
@use '../../../design-system' as ds;

$z-index-mouse-mask: 10000; // NOTE: Above .ag-dnd-ghost z-index of 9999
$z-index-debug-canvas: $z-index-mouse-mask + 10;
$z-index-splash: $z-index-debug-canvas + 10;
$z-index-debug-panel: $z-index-splash + 10;
$z-index-mouse-capture-mask: $z-index-splash + 10;
$z-index-splash-contents: 10;

:global(.automated-row-grouping-grid.ag-theme-alpine-dark) {
    position: relative;

    svg[class*='logo-mark'] {
        position: absolute;
        display: block;
        width: 64px * 2;
        height: 48px * 2;
        top: 50%;
        left: 50%;
        transform: translate(-60px, -48px);
    }

    // Button overrides for for .ag-styles specificity
    :global(button.ag-side-button-button) {
        // Inherit text styles
        color: inherit;
        font-family: inherit;
        font-size: inherit;
        font-weight: inherit;
        line-height: inherit;

        // Button styles
        background: transparent;
        padding: calc(var(--ag-grid-size) * 2) 0 calc(var(--ag-grid-size) * 2) 0;
        width: 100%;
        margin: 0;
        min-height: calc(var(--ag-grid-size) * 18);
        background-position-y: center;
        background-position-x: center;
        background-repeat: no-repeat;

        border: none;
        border-top: var(--ag-borders-side-button) var(--ag-border-color);
        border-bottom: var(--ag-borders-side-button) var(--ag-border-color);

        &:focus {
            box-shadow: none;
        }
    }
}

.splash {
    $splash-hidden-amount: 96%;

    --text-color: var(--white);

    --button-color: var(--white);
    --button-hover-color: var(--white);
    --button-text-color: var(--dark-cerulean-blue);

    --link-color: var(--white);
    --link-hover-color: var(--white);

    position: absolute;
    display: flex;
    align-items: center;
    top: 0;
    left: 35%;
    width: 65%;
    height: 100%;
    z-index: $z-index-splash;
    transition: transform ds.$default-transition-timing;

    &.hide {
        transform: translateX($splash-hidden-amount);

        &:hover {
            cursor: pointer;
            transform: translateX(80%);
        }
    }
}

.contents {
    max-width: 22em;
    margin-left: 10% !important; // !important for .ag-styles specificity;
    margin-right: 10% !important; // !important for .ag-styles specificity;
    line-height: var(--line-height-tight);
    color: var(--text-color);
    z-index: $z-index-splash-contents;

    h2 {
        --font-weight: var(--font-weight-bold);
    }

    button {
        margin-top: ds.$size-4;
    }

    a {
        display: block;
        text-decoration: underline;
        margin-top: ds.$size-8 !important; // !important for .ag-styles specificity;
    }
}

.splashTrapeziumBackground {
    position: absolute;
    top: 0;
    left: -25%;
    width: 200%;
    height: 100%;
    transform: skew(-20deg) translateX(5%);
    background-color: rgba(map.get(ds.$abstract-colors, 'dark-cerulean-blue'), 0.75);
    backdrop-filter: blur(3px);
}

.debugPanel {
    position: fixed;
    top: 0;
    right: 0;
    width: 200px;
    height: 7.5rem;
    border-left: 1px solid var(--border-color);
    border-bottom: 1px solid var(--border-color);
    background-color: rgba(255, 255, 255, 0.85);
    padding: ds.$size-2;
    z-index: $z-index-debug-panel;

    :global(.state) {
        &::before {
            content: 'State: ';
            color: var(--dull-light-gray);
        }
    }

    :global(.paused-state) {
        &::before {
            content: 'Paused at: ';
            color: var(--dull-light-gray);
        }
    }

    :global(.draw-checkbox) {
        margin-top: ds.$size-1;
        cursor: pointer;
    }
}

.debugCanvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: $z-index-debug-canvas;
}

.mouseMask {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    margin: 41px 1rem 1rem;
    overflow: hidden;
    z-index: $z-index-mouse-mask;
    pointer-events: none;

    // Start off hidden
    opacity: 0;

    :global(.mouse) {
        position: absolute;
        top: 0;
        left: 0;
    }

    :global(.highlight) {
        opacity: 0.15;
    }

    :global(.animate-click) {
        transform-origin: 50% calc(50% - 1px);
        opacity: 0;
        transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
    }

    &:global(.animate .animate-click) {
        opacity: 0.3;
        transform: scale(12);
    }
}

.mouseCaptureMask {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: $z-index-mouse-capture-mask;

    &:global(.hidden) {
        display: none;
    }
}
